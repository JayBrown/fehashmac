/*
 * Generic Hash and HMAC Program
 *
 * Copyright (C) 2009 Harald von Fellenberg <hvf@hvf.ch>
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 3 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 *	list of all supported algorithms
 *	this header file can only be included exactly once, since
 *	it defines the array HashTable[]
 */

/*  13.02.2016 hvf add FIPS 202 reference for SHA3 */
/*  29.02.2016 hvf rename xofshake to shake */

struct hash_algo HashTable[] = {
	{	"sha1", 
		(HASHINIT) SHA1_init, 
		SHA1_update, 
		SHA1_final, 
 		SHA1_hash,
		free, 
		SHA1_HashToByte, 
		SHA1_File, 
		SHA1_testvector, 
		SHA1_testvector_bitwise,
		SHA1_HMACtestvector, 
		HASH_LENGTH_SHA_1,
		HASH_INPUTBUFFER_SHA_1,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		1,	// bitwise OK
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha224", 
		(HASHINIT) SHA224_init, 
		SHA224_update, 
		SHA224_final, 
		SHA224_hash, 
		free, 
		SHA224_HashToByte, 
		SHA224_File, 
		SHA224_testvector, 
		SHA224_testvector_bitwise, 
		SHA224_HMACtestvector, 
		HASH_LENGTH_SHA_224,
		HASH_INPUTBUFFER_SHA_224,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		1,	// bitwise OK
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha256", 
		(HASHINIT) SHA256_init, 
		SHA256_update, 
		SHA256_final, 
		SHA256_hash, 
		free, 
		SHA256_HashToByte, 
		SHA256_File, 
		SHA256_testvector, 
		SHA256_testvector_bitwise, 
		SHA256_HMACtestvector, 
		HASH_LENGTH_SHA_256,
		HASH_INPUTBUFFER_SHA_256,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		1,	// bitwise OK
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	},
	{	"sha384", 
		(HASHINIT) SHA384_init, 
		SHA384_update, 
		SHA384_final, 
		SHA384_hash, 
		free, 
		SHA384_HashToByte, 
		SHA384_File, 
		SHA384_testvector, 
		SHA384_testvector_bitwise, 
		SHA384_HMACtestvector, 
		HASH_LENGTH_SHA_384,
		HASH_INPUTBUFFER_SHA_384,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		1,	// bitwise OK
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha512", 
		(HASHINIT) SHA512_init, 
		SHA512_update, 
		SHA512_final, 
		SHA512_hash, 
		free, 
		SHA512_HashToByte, 
		SHA512_File, 
		SHA512_testvector, 
		SHA512_testvector_bitwise, 
		SHA512_HMACtestvector, 
		HASH_LENGTH_SHA_512,
		HASH_INPUTBUFFER_SHA_512,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		1,	// bitwise OK
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha512-224", 
		(HASHINIT) SHA512_224_init, 
		SHA512_224_update, 
		SHA512_224_final, 
		SHA512_224_hash, 
		free, 
		SHA512_224_HashToByte, 
		SHA512_224_File, 
		SHA512_224_testvector, 
		NULL, 
		NULL,
		HASH_LENGTH_SHA_512_224,
		HASH_INPUTBUFFER_SHA_512_224,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		2,	// bitwise OK, no test vectors
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	 },

	{	"sha512-256", 
		(HASHINIT) SHA512_256_init, 
		SHA512_256_update, 
		SHA512_256_final, 
		SHA512_256_hash, 
		free, 
		SHA512_256_HashToByte, 
		SHA512_256_File, 
		SHA512_256_testvector, 
		NULL, 
		NULL,
		HASH_LENGTH_SHA_512_256,
		HASH_INPUTBUFFER_SHA_512_256,
		"FIPS PUB 180-4, March 2012, http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf",
		2,	// bitwise OK, no test vectors
		1,	// HMAC OK
		0,	// no base64 
		0,	// no variable length output
	 },

	{	"md2", 
		(HASHINIT) MD2_init, 
		MD2_update, 
		MD2_final, 
		MD2_hash, 
		free, 
		MD2_HashToByte, 
		MD2_File, 
		MD2_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_MD2,
		HASH_INPUTBUFFER_MD2,
		"RFC1319, http://www.ietf.org/rfc/rfc1319.txt",
		0, 1, 0, 0, },

	{	"md4", 
		(HASHINIT) MD4_init, 
		MD4_update, 
		MD4_final, 
		MD4_hash,
		free, 
		MD4_HashToByte, 
		MD4_File, 
		MD4_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_MD4,
		HASH_INPUTBUFFER_MD4,
		"RFC1320, http://www.ietf.org/rfc/rfc1320.txt",
		0, 1, 0, 0, },

	{	"md5", 
		(HASHINIT) MD5_init, 
		MD5_update, 
		MD5_final, 
		MD5_hash,
		free, 
		MD5_HashToByte, 
		MD5_File, 
		MD5_testvector, 
		NULL,
		MD5_HMACtestvector, 
		HASH_LENGTH_MD5,
		HASH_INPUTBUFFER_MD5,
		"RFC1321, http://www.ietf.org/rfc/rfc1321.txt",
		0, 1, 0, 0, },

	{	"rmd128", 
		(HASHINIT) RIPEMD128_init, 
		RIPEMD128_update, 
		RIPEMD128_final, 
		RIPEMD128_hash, 
		free, 
		RIPEMD128_HashToByte, 
		RIPEMD128_File, 
		RIPEMD128_testvector, 
		NULL,
		RIPEMD128_HMACtestvector, 
		HASH_LENGTH_RIPEMD128,
		HASH_INPUTBUFFER_RIPEMD128,
		"http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html",	
		0, 1, 0, 0, },

	{	"rmd160", 
		(HASHINIT) RIPEMD160_init, 
		RIPEMD160_update, 
		RIPEMD160_final, 
		RIPEMD160_hash, 
		free, 
		RIPEMD160_HashToByte, 
		RIPEMD160_File, 
		RIPEMD160_testvector, 
		NULL,
		RIPEMD160_HMACtestvector, 
		HASH_LENGTH_RIPEMD160,
		HASH_INPUTBUFFER_RIPEMD160,
		"http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html",	
		0, 1, 0, 0, },

	{	"rmd256", 
		(HASHINIT) RIPEMD256_init, 
		RIPEMD256_update, 
		RIPEMD256_final, 
		RIPEMD256_hash, 
		free, 
		RIPEMD256_HashToByte, 
		RIPEMD256_File, 
		RIPEMD256_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_RIPEMD256,
		HASH_INPUTBUFFER_RIPEMD256,
		"http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html",	
		0, 1, 0, 0, },

	{	"rmd320", 
		(HASHINIT) RIPEMD320_init, 
		RIPEMD320_update, 
		RIPEMD320_final, 
		RIPEMD320_hash, 
		free, 
		RIPEMD320_HashToByte, 
		RIPEMD320_File, 
		RIPEMD320_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_RIPEMD320,
		HASH_INPUTBUFFER_RIPEMD320,
		"http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html",	
		0, 1, 0, 0, },

	{	"whirl", 
		(HASHINIT) WHIRL_init, 
		WHIRL_update, 
		WHIRL_final, 
		WHIRL_hash, 
		free, 
		WHIRL_HashToByte, 
		WHIRL_File, 
		WHIRL_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_WHIRL,
		HASH_INPUTBUFFER_WHIRL,
		"http://www.larc.usp.br/~pbarreto/WhirlpoolPage.html",
		2, 1, 0, 0, },

	{	"gost", 
		(HASHINIT) GOST_init, 
		GOST_update, 
		GOST_final, 
		GOST_hash, 
		free, 
		GOST_HashToByte, 
		GOST_File, 
		GOST_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_GOST,
		HASH_INPUTBUFFER_GOST,
		"GOST R 34.11-94, the Russian equivalent of SHA.\n            http://www.autochthonous.org/crypto/gosthash.tar.gz", 
		0, 1, 0, 0, },

	{	"lash160", 
		(HASHINIT) LASH160_init, 
		LASH160_update, 
		LASH160_final, 
		LASH160_hash, 
		free, 
		LASH160_HashToByte, 
		LASH160_File, 
		LASH160_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_LASH160,
		HASH_INPUTBUFFER_LASH160,
		"http://csrc.nist.gov/pki/HashWorkshop/2006/Papers/SAARINEN_lash4-1_ORIG.pdf", 
		0, 1, 0, 0, },

	{	"lash256", 
		(HASHINIT) LASH256_init, 
		LASH256_update, 
		LASH256_final, 
		LASH256_hash, 
		free, 
		LASH256_HashToByte, 
		LASH256_File, 
		LASH256_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_LASH256,
		HASH_INPUTBUFFER_LASH256,
		"http://csrc.nist.gov/pki/HashWorkshop/2006/Papers/SAARINEN_lash4-1_ORIG.pdf", 
		0, 1, 0, 0, },

	{	"lash384", 
		(HASHINIT) LASH384_init, 
		LASH384_update, 
		LASH384_final, 
		LASH384_hash, 
		free, 
		LASH384_HashToByte, 
		LASH384_File, 
		LASH384_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_LASH384,
		HASH_INPUTBUFFER_LASH384,
		"http://csrc.nist.gov/pki/HashWorkshop/2006/Papers/SAARINEN_lash4-1_ORIG.pdf", 
		0, 1, 0, 0, },

	{	"lash512", 
		(HASHINIT) LASH512_init, 
		LASH512_update, 
		LASH512_final, 
		LASH512_hash, 
		free, 
		LASH512_HashToByte, 
		LASH512_File, 
		LASH512_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_LASH512,
		HASH_INPUTBUFFER_LASH512,
		"http://csrc.nist.gov/pki/HashWorkshop/2006/Papers/SAARINEN_lash4-1_ORIG.pdf", 
		0, 1, 0, 0, },

	{	"tiger2", 
		(HASHINIT) TIGER_init, 
		TIGER_update, 
		TIGER_final, 
		TIGER_hash, 
		free, 
		TIGER_HashToByte, 
		TIGER_File, 
		TIGER_testvector, 
		NULL,
		NULL,
		HASH_LENGTH_TIGER,
		HASH_INPUTBUFFER_TIGER,
		"http://www.cs.technion.ac.il/~biham/Reports/Tiger/\n            This code implements the Tiger 2 padding (like MD5)" ,
		0, 1, 0, 0, },

	{	"blake224", 
		(HASHINIT) BLAKE224_init, 
		BLAKE224_update, 
		BLAKE224_final, 
		BLAKE224_hash, 
		free, 
		BLAKE224_HashToByte, 
		BLAKE224_File, 
		BLAKE224_testvector, 
		BLAKE224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_BLAKE_224,
		HASH_INPUTBUFFER_BLAKE_224,
		"BLAKE homepage http://www.131002.net/blake/",
		1, 1, 0, 0, },

	{	"blake256", 
		(HASHINIT) BLAKE256_init, 
		BLAKE256_update, 
		BLAKE256_final, 
		BLAKE256_hash, 
		free, 
		BLAKE256_HashToByte, 
		BLAKE256_File, 
		BLAKE256_testvector, 
		BLAKE256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_BLAKE_256,
		HASH_INPUTBUFFER_BLAKE_256,
		"BLAKE homepage http://www.131002.net/blake/",
		1, 1, 0, 0, },

	{	"blake384", 
		(HASHINIT) BLAKE384_init, 
		BLAKE384_update, 
		BLAKE384_final, 
		BLAKE384_hash, 
		free, 
		BLAKE384_HashToByte, 
		BLAKE384_File, 
		BLAKE384_testvector, 
		BLAKE384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_BLAKE_384,
		HASH_INPUTBUFFER_BLAKE_384,
		"BLAKE homepage http://www.131002.net/blake/",
		1, 1, 0, 0, },

	{	"blake512", 
		(HASHINIT) BLAKE512_init, 
		BLAKE512_update, 
		BLAKE512_final, 
		BLAKE512_hash, 
		free, 
		BLAKE512_HashToByte, 
		BLAKE512_File, 
		BLAKE512_testvector, 
		BLAKE512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_BLAKE_512,
		HASH_INPUTBUFFER_BLAKE_512,
		"BLAKE homepage http://www.131002.net/blake/",
		1, 1, 0, 0, },

	{	"groestl224", 
		(HASHINIT) GROESTL224_init, 
		GROESTL224_update, 
		GROESTL224_final, 
		GROESTL224_hash, 
		free, 
		GROESTL224_HashToByte, 
		GROESTL224_File, 
		GROESTL224_testvector, 
		GROESTL224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_GROESTL_224,
		HASH_INPUTBUFFER_GROESTL_224,
		"GROESTL homepage http://www.groestl.info/",
		1, 1, 0, 0, },

	{	"groestl256", 
		(HASHINIT) GROESTL256_init, 
		GROESTL256_update, 
		GROESTL256_final, 
		GROESTL256_hash, 
		free, 
		GROESTL256_HashToByte, 
		GROESTL256_File, 
		GROESTL256_testvector, 
		GROESTL256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_GROESTL_256,
		HASH_INPUTBUFFER_GROESTL_256,
		"GROESTL homepage http://www.groestl.info/",
		1, 1, 0, 0, },

	{	"groestl384", 
		(HASHINIT) GROESTL384_init, 
		GROESTL384_update, 
		GROESTL384_final, 
		GROESTL384_hash, 
		free, 
		GROESTL384_HashToByte, 
		GROESTL384_File, 
		GROESTL384_testvector, 
		GROESTL384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_GROESTL_384,
		HASH_INPUTBUFFER_GROESTL_384,
		"GROESTL homepage http://www.groestl.info/",
		1, 1, 0, 0, },

	{	"groestl512", 
		(HASHINIT) GROESTL512_init, 
		GROESTL512_update, 
		GROESTL512_final, 
		GROESTL512_hash, 
		free, 
		GROESTL512_HashToByte, 
		GROESTL512_File, 
		GROESTL512_testvector, 
		GROESTL512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_GROESTL_512,
		HASH_INPUTBUFFER_GROESTL_512,
		"GROESTL homepage http://www.groestl.info/",
		1, 1, 0, 0, },

	{	"jh224", 
		(HASHINIT) JH224_init, 
		JH224_update, 
		JH224_final, 
		JH224_hash, 
		free, 
		JH224_HashToByte, 
		JH224_File, 
		JH224_testvector, 
		JH224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_JH_224,
		HASH_INPUTBUFFER_JH_224,
		"JH homepage http://www3.ntu.edu.sg/home/wuhj/research/jh/",
		1, 1, 0, 0, },

	{	"jh256", 
		(HASHINIT) JH256_init, 
		JH256_update, 
		JH256_final,
		JH256_hash, 
		free, 
		JH256_HashToByte, 
		JH256_File, 
		JH256_testvector, 
		JH256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_JH_256,
		HASH_INPUTBUFFER_JH_256,
		"JH homepage http://www3.ntu.edu.sg/home/wuhj/research/jh/",
		1, 1, 0, 0, },

	{	"jh384", 
		(HASHINIT) JH384_init, 
		JH384_update, 
		JH384_final, 
		JH384_hash, 
		free, 
		JH384_HashToByte, 
		JH384_File, 
		JH384_testvector, 
		JH384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_JH_384,
		HASH_INPUTBUFFER_JH_384,
		"JH homepage http://www3.ntu.edu.sg/home/wuhj/research/jh/",
		1, 1, 0, 0, },

	{	"jh512", 
		(HASHINIT) JH512_init, 
		JH512_update, 
		JH512_final, 
		JH512_hash, 
		free, 
		JH512_HashToByte, 
		JH512_File, 
		JH512_testvector, 
		JH512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_JH_512,
		HASH_INPUTBUFFER_JH_512,
		"JH homepage http://www3.ntu.edu.sg/home/wuhj/research/jh/",
		1, 1, 0, 0, },

	{	"keccak224", 
		(HASHINIT) KECCAK224_init, 
		KECCAK224_update, 
		KECCAK224_final, 
		KECCAK224_hash, 
		free, 
		KECCAK224_HashToByte, 
		KECCAK224_File, 
		KECCAK224_testvector, 
		KECCAK224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_KECCAK_224,
		HASH_INPUTBUFFER_KECCAK_224,
		"KECCAK homepage http://keccak.noekeon.org/",
		1, 1, 0, 0, },

	{	"keccak256", 
		(HASHINIT) KECCAK256_init, 
		KECCAK256_update, 
		KECCAK256_final, 
		KECCAK256_hash, 
		free, 
		KECCAK256_HashToByte, 
		KECCAK256_File, 
		KECCAK256_testvector, 
		KECCAK256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_KECCAK_256,
		HASH_INPUTBUFFER_KECCAK_256,
		"KECCAK homepage http://keccak.noekeon.org/",
		1, 1, 0, 0, },

	{	"keccak384", 
		(HASHINIT) KECCAK384_init, 
		KECCAK384_update, 
		KECCAK384_final, 
		KECCAK384_hash, 
		free, 
		KECCAK384_HashToByte, 
		KECCAK384_File, 
		KECCAK384_testvector, 
		KECCAK384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_KECCAK_384,
		HASH_INPUTBUFFER_KECCAK_384,
		"KECCAK homepage http://keccak.noekeon.org/",
		1, 1, 0, 0, },

	{	"keccak512", 
		(HASHINIT) KECCAK512_init, 
		KECCAK512_update, 
		KECCAK512_final, 
		KECCAK512_hash, 
		free, 
		KECCAK512_HashToByte, 
		KECCAK512_File, 
		KECCAK512_testvector, 
		KECCAK512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_KECCAK_512,
		HASH_INPUTBUFFER_KECCAK_512,
		"KECCAK homepage http://keccak.noekeon.org/",
		1, 1, 0, 0, },

	{	"skein224", 
		(HASHINIT) SKEIN224_init, 
		SKEIN224_update, 
		SKEIN224_final, 
		SKEIN224_hash, 
		free, 
		SKEIN224_HashToByte, 
		SKEIN224_File, 
		SKEIN224_testvector, 
		SKEIN224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SKEIN_224,
		HASH_INPUTBUFFER_SKEIN_224,
		"SKEIN homepage http://www.skein-hash.info/",
		1, 1, 0, 0, },

	{	"skein256", 
		(HASHINIT) SKEIN256_init, 
		SKEIN256_update, 
		SKEIN256_final, 
		SKEIN256_hash, 
		free, 
		SKEIN256_HashToByte, 
		SKEIN256_File, 
		SKEIN256_testvector, 
		SKEIN256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SKEIN_256,
		HASH_INPUTBUFFER_SKEIN_256,
		"SKEIN homepage http://www.skein-hash.info/",
		1, 1, 0, 0, },

	{	"skein384", 
		(HASHINIT) SKEIN384_init, 
		SKEIN384_update, 
		SKEIN384_final, 
		SKEIN384_hash, 
		free, 
		SKEIN384_HashToByte, 
		SKEIN384_File, 
		SKEIN384_testvector, 
		SKEIN384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SKEIN_384,
		HASH_INPUTBUFFER_SKEIN_384,
		"SKEIN homepage http://www.skein-hash.info/",
		1, 1, 0, 0, },

	{	"skein512", 
		(HASHINIT) SKEIN512_init, 
		SKEIN512_update, 
		SKEIN512_final, 
		SKEIN512_hash, 
		free, 
		SKEIN512_HashToByte, 
		SKEIN512_File, 
		SKEIN512_testvector, 
		SKEIN512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SKEIN_512,
		HASH_INPUTBUFFER_SKEIN_512,
		"SKEIN homepage http://www.skein-hash.info/",
		1, 1, 0, 0, },

	{	"skein1024", 
		(HASHINIT) SKEIN1024_init, 
		SKEIN1024_update, 
		SKEIN1024_final, 
		SKEIN1024_hash, 
		free, 
		SKEIN1024_HashToByte, 
		SKEIN1024_File, 
		SKEIN1024_testvector, 
		SKEIN1024_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SKEIN_1024,
		HASH_INPUTBUFFER_SKEIN_1024,
		"SKEIN homepage http://www.skein-hash.info/",
		1, 1, 0, 0, },

	{	"sha3-224", 
		(HASHINIT) SHA3_224_init, 
		SHA3_224_update, 
		SHA3_224_final, 
		SHA3_224_hash, 
		free, 
		SHA3_224_HashToByte, 
		SHA3_224_File, 
		SHA3_224_testvector, 
		SHA3_224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SHA3_224,
		HASH_INPUTBUFFER_SHA3_224,
		"FIPS PUB 202, August 2015, http://dx.doi.org/10.6028/NIST.FIPS.202",
		1, 	// bitwise OK
		2,	// KMAC support
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha3-256", 
		(HASHINIT) SHA3_256_init, 
		SHA3_256_update, 
		SHA3_256_final, 
		SHA3_256_hash, 
		free, 
		SHA3_256_HashToByte, 
		SHA3_256_File, 
		SHA3_256_testvector, 
		SHA3_256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SHA3_256,
		HASH_INPUTBUFFER_SHA3_256,
		"FIPS PUB 202, August 2015, http://dx.doi.org/10.6028/NIST.FIPS.202",
		1, 	// bitwise OK
		2,	// KMAC support
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha3-384", 
		(HASHINIT) SHA3_384_init, 
		SHA3_384_update, 
		SHA3_384_final, 
		SHA3_384_hash, 
		free, 
		SHA3_384_HashToByte, 
		SHA3_384_File, 
		SHA3_384_testvector, 
		SHA3_384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SHA3_384,
		HASH_INPUTBUFFER_SHA3_384,
		"FIPS PUB 202, August 2015, http://dx.doi.org/10.6028/NIST.FIPS.202",
		1, 	// bitwise OK
		2,	// KMAC support
		0,	// no base64 
		0,	// no variable length output
	},

	{	"sha3-512", 
		(HASHINIT) SHA3_512_init, 
		SHA3_512_update, 
		SHA3_512_final, 
		SHA3_512_hash, 
		free, 
		SHA3_512_HashToByte, 
		SHA3_512_File, 
		SHA3_512_testvector, 
		SHA3_512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SHA3_512,
		HASH_INPUTBUFFER_SHA3_512,
		"FIPS PUB 202, August 2015, http://dx.doi.org/10.6028/NIST.FIPS.202",
		1, 	// bitwise OK
		2,	// KMAC support
		0,	// no base64 
		0,	// no variable length output
	},
    /* the simple SHAKE functions are replaced with the XOFSHAKE variants
     * and the xofshake128, xofshake256 are not callable any more
     */
	{	"shake128", 
		(HASHINIT) XOFSHAKE128_init, 
		XOFSHAKE128_update, 
		XOFSHAKE128_final, 
		NULL, 
		free, 
		XOFSHAKE128_HashToByte, 
		XOFSHAKE128_File, 
		SHAKE128_testvector, 
		SHAKE128_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SHAKE128,
		HASH_INPUTBUFFER_SHAKE128,
		"FIPS PUB 202, August 2015, http://dx.doi.org/10.6028/NIST.FIPS.202",
		1, 	// bitwise OK
		2,	// KMAC support
		1,	// base64 OK
		XOF_LENGTH_XOFSHAKE128,	// variable length output OK, default length
	},

	{	"shake256", 
		(HASHINIT) XOFSHAKE256_init, 
		XOFSHAKE256_update, 
		XOFSHAKE256_final, 
		NULL, 
		free, 
		XOFSHAKE256_HashToByte, 
		XOFSHAKE256_File, 
		SHAKE256_testvector, 
		SHAKE256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_SHAKE256,
		HASH_INPUTBUFFER_SHAKE256,
		"FIPS PUB 202, August 2015, http://dx.doi.org/10.6028/NIST.FIPS.202",
		1, 	// bitwise OK
		2,	// KMAC support
		1,	// base64 OK
		XOF_LENGTH_XOFSHAKE256,	// variable length output OK, default length
	},

	{	"md6-224", 
		(HASHINIT) MD6_224_init, 
		MD6_224_update, 
		MD6_224_final, 
		MD6_224_hash, 
		free, 
		MD6_224_HashToByte, 
		MD6_224_File, 
		MD6_224_testvector, 
		MD6_224_testvector_bitwise, 
		NULL,
		HASH_LENGTH_MD6_224,
		HASH_INPUTBUFFER_MD6_224,
		"http://groups.csail.mit.edu/cis/md6/",
		1, 	// bitwise OK
		1,	// HMAC support
		0,	// no base64 
		0,	// no variable length output
	},

	{	"md6-256", 
		(HASHINIT) MD6_256_init, 
		MD6_256_update, 
		MD6_256_final, 
		MD6_256_hash, 
		free, 
		MD6_256_HashToByte, 
		MD6_256_File, 
		MD6_256_testvector, 
		MD6_256_testvector_bitwise, 
		NULL,
		HASH_LENGTH_MD6_256,
		HASH_INPUTBUFFER_MD6_256,
		"http://groups.csail.mit.edu/cis/md6/",
		1, 	// bitwise OK
		1,	// HMAC support
		0,	// no base64 
		0,	// no variable length output
	},

	{	"md6-384", 
		(HASHINIT) MD6_384_init, 
		MD6_384_update, 
		MD6_384_final, 
		MD6_384_hash, 
		free, 
		MD6_384_HashToByte, 
		MD6_384_File, 
		MD6_384_testvector, 
		MD6_384_testvector_bitwise, 
		NULL,
		HASH_LENGTH_MD6_384,
		HASH_INPUTBUFFER_MD6_384,
		"http://groups.csail.mit.edu/cis/md6/",
		1, 	// bitwise OK
		1,	// HMAC support
		0,	// no base64 
		0,	// no variable length output
	},

	{	"md6-512", 
		(HASHINIT) MD6_512_init, 
		MD6_512_update, 
		MD6_512_final, 
		MD6_512_hash, 
		free, 
		MD6_512_HashToByte, 
		MD6_512_File, 
		MD6_512_testvector, 
		MD6_512_testvector_bitwise, 
		NULL,
		HASH_LENGTH_MD6_512,
		HASH_INPUTBUFFER_MD6_512,
		"http://groups.csail.mit.edu/cis/md6/",
		1, 	// bitwise OK
		1,	// HMAC support
		0,	// no base64 
		0,	// no variable length output
	},
};

		// number of entries in HashTable
int     HashTableSize = sizeof(HashTable)/sizeof(HashTable[0]);

